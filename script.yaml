- shimmer: |
    This short video introduces the basic concepts of the Origami programming
    language, a general-purpose language with a focus on creating websites.
- echo: |
    Origami is designed to complement HTML and CSS to do the things those
    languages can’t do, including defining a site’s overall structure, and
    transforming the content you create by hand into HTML and other resources that
    you can deploy anywhere.
- shimmer: |
    Using a language for this purpose lets you be the one directing the action —
    nothing happens unless you ask for it. In exchange for having to learn a new
    language, you end up with a site whose construction you can completely
    understand.
- echo: |
    To illustrate the basic ideas in their plainest form, let's start by writing
    some expressions in Origami using the command-line interface called ori. If
    I type "ori 1 plus 1", it evaluates that and displays 2.
- echo: |
    If I type "ori hello”, ori displays hello. In the shell, you'll need to
    escape quotes or surround them with extra quotes because the shell itself
    consumes quote marks.
- shimmer: |
    In addition to basic numbers and strings, you can reference files.
    Think of each file here as if it were a spreadsheet cell. Instead of the A1,
    B2 style cell references in a spreadsheet, here we use paths and file names to
    refer to things. Unlike most programming languages, names in Origami can
    include characters like periods and hyphens.
- echo: |
    Where a spreadsheet has built-in math functions, Origami has built-in functions
    for transforming data and creating parts of sites. We can call a function that
    transforms markdown to HTML, giving it a markdown file as input.
- echo: |
    To avoid having to quote parentheses in the shell, we can omit them and
    Origami will figure out where they would be.
- shimmer: |
    In addition to the file system, Origami can work with other hierarchical
    tree structures, like objects in memory, data in files, or content on a
    server.
- shimmer: |
    When you ask Origami to traverse a file like this, it uses the file's
    extension to determine how to interpret the file. Just like your operation
    system has file assocations, Origami can associate file extensions with
    functions that know how to unpack that kind of data so you can traverse into
    it.
- echo: |
    Origami resolves references to things using the same kind of scoping that
    programming languages provide, but Origami's notion of scope extends to the
    file system. If I Origami to display the README file and that file doesn't
    exist in this folder, Origami will search up the folder hierarchy. In this
    case, it finds the README in the project's top-level folder.
- shimmer: |
    You don’t have to know JavaScript to use Origami — but if you do know
    JavaScript, you can use to easily extend what Origami can do. You can write a
    function like this and then call it from the shell.
- shimmer: |
    Using another file association, Origami knows it should handle this
    JavaScript file by importing the module and calling its default export.
- shimmer: |
    You can freely compose these ideas, so you can read data out of a file and
    then pass it to a JavaScript function.
- echo: |
    As an Origami expression grows in complexity, it may be helpful to save it
    in its own file so that you can invoke it later.
- echo: |
    If we ask Origami for this dot ori file, we get the file's contents back.
    Adding a slash lets Origami know we want to evaluate the file as an
    expression. So this kind of dot ori file is like a spreadsheet cell that
    contains a formula — instead of looking at the formula, we can ask to see
    its value.
- shimmer: |
    Origami can be used for lots of things but is especially good for creating
    websites. You can think about a site as a tree of resources.
- shimmer: |
    You can create a tree with an expression that defines an object. This tiny
    object has a single property called "a", and we can ask Origami for the
    value of that property.
- echo: |
    The tree for a website is just an object with the structure we want. This
    tiny site has a single page called index dot html. We can define the value
    of that index page however we want. Here we'll use a function to say hello.
- echo: |
    In the shell, we can ask Origami to evaluate that file to see the tree it
    represents.
- shimmer: |
    To actually experience this site, we can serve the tree defined by this
    file, and then navigate to that location in a browser.
