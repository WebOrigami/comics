#
# This is the screenplay for the Origami intro screencast. Everything in the
# final animated comic, including the voiceover, is directly derived from this
# screenplay.
#
# YAML is used for this purpose because it is fairly easy to write by hand, easy
# to parse, and accommodates multi-line text well. The narration and footnotes
# can include markdown formatting that will be transformed to HTML.
#

- actor: Alice
  narration: >
    Let's start by writing some expressions in Origami using the command-line
    interface called **ori**.

- actor: Bob
  scene: terminal.ori.html
  options: 1 + 1
  narration: >
    If I type **ori 1 + 1**, it evaluates that and displays **2**.

- actor: Bob
  scene: terminal.ori.html
  options: |-
    \"hello\"
  narration: >
    If I type **ori "hello"**, ori displays **hello**.
  footnote: In the shell, you need to escape or nest quotes.

- actor: Bob
  narration: >
    But to build a site, you'll want to reference **files**!
  scene: editor.ori.html
  options:
    file: hello.md

- actor: Alice
  scene: terminal.ori.html
  options: hello.md
  narration: >
    Think of your files as a spreadsheet… but instead of using A1, B2 style cell
    references, you refer to files with **paths and file names**.
  footnote: >
    Unlike most programming languages, Origami lets you use **periods** and
    **hyphens** in names!

- actor: Bob
  narration: >
    Where a spreadsheet has built-in math functions, Origami has functions for
    **transforming data** for use in sites.

- actor: Bob
  scene: editor.ori.html
  options:
    file: hello.md
    command: |-
      "mdHtml(hello.md)"
  narration: >
    We can pass our markdown file to a function that **transforms** it to HTML.

- actor: Bob
  scene: editor.ori.html
  options:
    file: hello.md
    command: mdHtml hello.md
  narration: >
    To avoid quoting parentheses in the shell, we can **omit them**! Origami
    figures out where they would be.

- actor: Alice
  scene: terminal.ori.html
  options: teamData.yaml
  narration: >
    In addition to the file system, Origami can work with other **tree
    structures**, like objects in memory, data in files, or content on a server.

- actor: Alice
  scene: editor.ori.html
  options:
    file: teamData.yaml
    command: teamData.yaml/0/name
  narration: >
    Just like your operating system associates **file extensions** with apps,
    Origami associates extensions with **handlers** that can traverse into data.

- actor: Bob
  narration: >
    Origami resolves references using a **scope** like other programming
    languages, but scope in Origami extends to the **file system**.

- actor: Bob
  scene: terminal.ori.html
  options: README.md
  narration: >
    If I ask for a file that doesn't exist in this folder, Origami searches **up
    the folder hierarchy** until it finds the file.

- actor: Alice
  scene: editor.ori.html
  options:
    file: greet.js
  narration: >
    You don't have to know **JavaScript** to use Origami -- but if you do know
    JavaScript, you can use it to extend what Origami can do!

- actor: Alice
  scene: editor.ori.html
  options:
    file: greet.js
    command: greet.js \"world\"
  narration: >
    You can call a JavaScript function using its **file name**.

- actor: Alice
  scene: terminal.ori.html
  options: greet.js teamData.yaml/0/name
  narration: >
    You can freely **combine these ideas**, so you can call a JavaScript
    function using data from a file.

- actor: Bob
  scene: editor.ori.html
  options:
    file: greet.ori
  narration: >
    You can save an Origami expression **in its own file** so you can quickly
    invoke it later.
  footnote: Origami files have a **.ori** extension.

- actor: Bob
  scene: editor.ori.html
  options:
    file: greet.ori
    command: greet.ori
  narration: >
    This kind of file is like a spreadsheet cell with a formula. If we ask
    Origami for this file, we just get the formula back.

- actor: Bob
  scene: editor.ori.html
  options:
    file: greet.ori
    command: greet.ori/
  narration: >
    But **adding a slash** lets Origami know that, instead of getting the
    formula, we want to get its **value**.

- actor: Alice
  scene: graphic.ori.html
  options: graphics/tree.ori.html/
  narration: >
    Origami is good for creating lots of things but especially websites. You can
    think of a site as a **tree of resources**.

- actor: Alice
  scene: terminal.ori.html
  options: |-
    { a: 1 }
  narration: >
    You can define a tree with an **object expression**. This tiny object has a
    single property called "a".

- actor: Alice
  scene: terminal.ori.html
  options: |-
    { a: 1 }/a
  narration: >
    We can use a **path** to traverse the tree and get the value of that property.

- actor: Bob
  scene: editor.ori.html
  options:
    file: site.ori
  narration: >
    To create a site, you can define an object with the **structure** and
    **contents** you want.
  footnote: This little site has a **single page** called index.html!

# - actor: Bob
#   scene: editor.ori.html
#   options:
#     file: site.ori
#     command: site.ori/
#   narration: >
#     We can ask Origami to evaluate that file to see the tree it represents.

- actor: Alice
  scene: editor.ori.html
  options:
    file: site.ori
    command: serve site.ori
  narration: >
    We can **serve** the tree defined by this file…

- actor: Alice
  scene: browser.ori.html
  options:
    path: localhost:5000
    page: site.ori/index.html
  narration: >
    …and open the site **in a browser** to see the page!
