- actor: Bob
  command: 1 + 1
  narration: >
    If I type **ori 1 + 1** it evaluates that and displays **2**.

- actor: Bob
  command: |-
    \"hello\"
  narration: >
    If I type **ori "hello"** ori displays **hello**.
  footnote: In the shell, you need to escape or nest quotes.

- actor: Bob
  narration: >
    But to build a site, you'll want to reference **files**!

- actor: Alice
  command: hello.md
  narration: >
    Think of a file as a spreadsheet cell… but instead of A1, B2 style
    references like a spreadsheet, you use **paths** and file names to refer to
    things.
  footnote: >
    Unlike most programming languages, Origami lets you use characters like
    periods and hyphens in names!

- actor: Bob
  narration: >
    Where a spreadsheet has built-in math functions, Origami has built-in functions
    for **transforming data** for use in sites.

- actor: Bob
  command: |-
    "mdHtml(hello.md)"
  narration: >
    We can call a function that transforms markdown to HTML, passing our
    markdown file as input.

- actor: Bob
  command: mdHtml hello.md
  narration: >
    To avoid quoting parentheses in the shell, we can **omit them**! Origami
    figures out where they would be.

- actor: Alice
  command: teamData.yaml
  narration: >
    In addition to the file system, Origami can work with other tree structures,
    like objects in memory, data in files, or content on a server.

- actor: Alice
  command: teamData.yaml/0/name
  narration: >
    Just like your operating system associates **file extensions** with
    applications, Origami associates extensions with handlers that can traverse
    into data.

- actor: Bob
  narration: >
    Origami resolves references using a **scope** like other programming
    languages, but scope in Origami extends to the file system.

- actor: Bob
  command: README.md
  narration: >
    If I ask for a file that doesn't exist in this folder, Origami searches up
    the folder hierarchy until it finds the file.

- actor: Alice
  narration: >
    You don't have to know **JavaScript** to use Origami -- but if you do know
    JavaScript, you can use it to easily extend what Origami can do!

- actor: Alice
  command: |-
    greet.js \"world\"
  narration: >
    You can call a JavaScript function using its **file name**.

- actor: Alice
  command: greet.js teamData.yaml/0/name
  narration: >
    You can freely combine these ideas, so you can call a JavaScript function
    using data from a file.

- actor: Bob
  footnote: Origami files have a .ori extension.
  narration: >
    You can save an Origami expression **in its own file** so you can quickly
    invoke it later.

- actor: Bob
  command: greet.ori
  narration: >
    This kind of .ori file is like a spreadsheet cell containing a formula.
    If we ask Origami for this file, we just get the formula back.

- actor: Bob
  command: greet.ori/
  narration: >
    But **adding a slash** lets Origami know that, instead of seeing the
    formula, we want to see its **value**.
